from django.db import models
from django.db.models.signals import post_save
from django.utils.formats import date_format
from django.utils import timezone
from .utils import slugfiy

'''
*****GLOSSARY*****

-title:         the title of the article that the user will see, also 
                used for slug generation
-content:       captions that will go under the album in a post, there
                will be one caption per post, not one per image in an
                album. This is optional.
-timeCreated:   time stamp of when object was created or saved. This 
                is uneditable.
-updated:       time stamp of last time the object was saved. This is
                uneditable.
-publish:       a boolean checkbox. When set to True, the album will
                be posted to the site for all to see and the date at 
                this time will be appended to the slug. When set to
                fasle the post will be hidden from the site.
-publishDate:   the date in which the post was published. This date can
                be set independently from the publish blooean. 
-slug:          this will be unique to every post and autogenerated
                upon creation of an object. When an object is published
                the publish date will be appended to the slug. Slugs 
                appear in the browser url. If posts are somehow not 
                unique and number is appeneded to the slug to differ 
                between these posts. 

'''

# Create your models here.
class album(models.Model):
    title = models.CharField(max_length=75)
    content = models.TextField(null=True,blank=True)
    timeCreated = models.DateTimeField(auto_now_add=True,editable=False) 
    updated = models.DateTimeField(auto_now=True,editable=False)
    publish = models.BooleanField(null=True,blank=True,default=False)
    publishDate = models.DateField(null=True,blank=True,default=None)
    slug = models.SlugField(null=True,editable=False)

    # Getters
    def getTitle(self):
        return self.title
    def getContent(self):
        return self.content
    def getTimeCreated(self):
        return self.timeCreated
    def getUpdated(self):
        return self.updated
    def getPublish(self):
        return self.publish
    def getPublishDate(self):
        return self.publishDate
    def getSlug(self):
        return self.slug
    
    # Setters
    def setUpdated(self):
        album.objects.filter(id=self.id).update(updated=timezone.now())
    # Set slug with title only, does not include publish date
    def setSlug(self):
        titleSlug = slugfiy(self.title)
        album.objects.filter(id=self.id).update(slug=titleSlug)
    # Set slug with publish date
    def setSlugPublish(self):
        ddmmyyyy = date_format(self.publishDate,'d-m-Y')
        publishSlug = f'{self.slug}-{ddmmyyyy}'
        album.objects.filter(id=self.id).update(slug=publishSlug)

    '''
    Override save function to note any changes in the fields of a 
    given object before and after it is saved by the user in the 
    django admin so that some automated proecesses can be carried out.
    An example of that is slug generation after initial save and 
    appending the publish date to the slug upon switching the boolean
    publish to True.
    '''
    def save(self,*args,**kwargs):
        try:
            old = album.objects.get(pk=self.pk)
            new = self
            updatedFields = []
            for field in album._meta.get_fields():
                fieldName = field.name
                try:
                    if getattr(old,fieldName) != getattr(new,fieldName):
                        updatedFields.append(fieldName) 
                except Exception as ex:
                    pass
            kwargs["updated_fields"] = updatedFields
        except:
            if old == None:
                print("Save comparison has run.")
                print("Object is new, old == None.")
        return super().save(*args,**kwargs)

def albumPostSave(instance, created, *args, **kwargs):
    if created or kwargs["updated_fields"] != []:
        instance.setSlug()
    if "publish" in kwargs["updated_fields"] and instance.publish == True:
        instance.setSlugPublish()
    if "publish" in kwargs["updated_fields"] and instance.publish == False:
        instance.setSlug()
    instance.setUpdated()

# Connect the post-save signal to the overridden save function
post_save.connect(albumPostSave,sender=album)

"""
The Simple Image Class that will hold photos in the album.
"""
class albumImage(models.Model):
    album = models.ForeignKey(album,on_delete=models.CASCADE)
    image = models.ImageField(upload_to='static/album/')